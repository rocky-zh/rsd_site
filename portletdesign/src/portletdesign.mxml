<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" error="httpErrorHandler(event)"  
				applicationComplete="onAppComplete();"  fontSize="12" height="100%" width="100%" backgroundColor="#FFFFFF" xmlns:comp="comp.*">
	<mx:Script>
		<![CDATA[
			import context.PortletContext;
			
			import exception.HttpFaultUtil;
			
			import flash.external.ExternalInterface;
			import flash.net.URLVariables;
			
			import mx.collections.XMLListCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.TextArea;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.formatters.DateFormatter;
			import mx.graphics.codec.JPEGEncoder;
			import mx.graphics.codec.PNGEncoder;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			import mx.utils.URLUtil;
			
			import portlet.Element;
			import portlet.ElementEvent;
			import portlet.Layout;
			import portlet.LayoutPanel;
			import portlet.Page;
			import portlet.Portlet;
			import portlet.comp.BaseElementLoad;
			import portlet.comp.LayoutElement;
			import portlet.comp.PortletElement;
			
			import service.DataLoader;
			import service.DataLoaderUtils;
			import service.ExternalMethod;
			import service.ServletDataLoader;
			
			import servlet.ServletConst;
			
			import utils.HashMap;
			
			private var paramMap:HashMap = new HashMap();
			
			public var myDrawBoard:Layout = new Layout();
			[Bindable]
			private var currentElement:Element;
			private var iniXml:XML ;
			[Bindable]
			private var newpage:Boolean = true;
			
			//数据加载来源,默认是servlet
			private var model:String = DataLoaderUtils.SERVLET_MODEL;
			
			//标识主界面是否创建完毕
			private var myDrawBoardIsComplete:Boolean = false;
			//标识是否获取到xml
			private var xmlIsReceived:Boolean = false;
			//已经存在的页面名称
			private var existPagenames:Array = new Array();
			
			private function onAppComplete():void {	
				setParam();
				setServerInfo();
				CreateContainer();	
				
				startTimmer();
				initData();
			}
			
			public function setServerInfo():void{	
				if(model==DataLoaderUtils.SERVLET_MODEL){
					var serverWebRoot:String =  ExternalInterface.call("getServerWebRoot");
					ServletConst.Server_web_root = serverWebRoot;//"http://localhost/portal";
					//Alert.show("loadservlet:"+ServletConst.Server_web_root);
					if(ServletConst.Server_web_root==null||ServletConst.Server_web_root==""){
						Alert.show("没有获得服务器地址,与服务器的交互都不会成功的");
					}	
				}
				else if(model==DataLoaderUtils.ECLIPSE_MODEL){	
					//如果是eclipse模式，则暴露一些外部调用哪个方法
					new ExternalMethod(this).exposureMethod();
				}
				if(model==DataLoaderUtils.ECLIPSE_MODEL){
					DataLoaderUtils.getDataLoader(model,this,getXml_resultHandler).loadXML("");
				}
				else if(model==DataLoaderUtils.SERVLET_MODEL){	
					var pk:String = paramMap.get("pk") as String;
					if(newpage==false&&pk!=null&&pk!=""){
						PortletContext.Pk = pk;
						DataLoaderUtils.getDataLoader(model,this,getXml_resultHandler).loadXML(PortletContext.Pk);
					}
				}
			}
			
			public function setParam():void{
				var url:String = "";
				//当 Flash Player 容器不是 Web 浏览器时，objectID属性为 null
				var objectID:String = ExternalInterface.objectID;
				if(objectID!=null){
					url = ExternalInterface.call("getUrl");
					//var url:String =  ExternalInterface.call(function (){return window.location.href;});
					//Alert.show(url);
				}
				else {
					var parameter:Object = this.parameters;					
					var urlparams:Array = new Array();
					for (var temp:String in parameter){
						urlparams.push(temp);
					}
					for(var k:int=0;k<urlparams.length;k++){
						if(k==0)url +="?";
						url += urlparams[k]+"="+parameter[urlparams[k]];
						if(k!=urlparams.length-1)url += "&";
					}
					//Alert.show("url:"+url);
				}	

				if(url==null||url=="")return;
				if(url.indexOf("?")<0)return;
				var paramUrl:String = StringUtil.trim(url.substring(url.indexOf("?")+1));
				//去除末尾的"#"
				if(paramUrl.indexOf("#")==paramUrl.length-1)
					paramUrl = paramUrl.substr(0,paramUrl.length-1);
				
				var params:Array = paramUrl.split("&");
				//var map:HashMap = new HashMap();
				for each(var kv:String in params){
					var kvs:Array = kv.split("=");
					if(kvs.length!=2)continue;
					paramMap.put(kvs[0],kvs[1]);
				}
				var pk_group:String = paramMap.get("groupid") as String;
				if(pk_group!=null&&pk_group!=""){
					PortletContext.Pk_group = pk_group;
				}	
				var newpageFlag:String = paramMap.get("newpage") as String;
				if(newpageFlag=="false"){
					newpage = false;
				}else newpage = true;
				
				var strModel:String = paramMap.get("model") as String;
				if(strModel==DataLoaderUtils.ECLIPSE_MODEL){
					model = DataLoaderUtils.ECLIPSE_MODEL;
				}
				else if(model==DataLoaderUtils.SERVLET_MODEL){
					model = DataLoaderUtils.SERVLET_MODEL;
				}
				
				var pk:String = paramMap.get("pk") as String;
				if(newpage==false&&pk!=null&&pk!=""){
					PortletContext.Pk = pk;
				}
				
				//				if(model==DataLoaderUtils.ECLIPSE_MODEL){
				//					DataLoaderUtils.getDataLoader(model,this,getXml_resultHandler).loadXML("");
				//				}
				//				else if(model==DataLoaderUtils.SERVLET_MODEL){					
				//					if(newpage==false&&pk!=null&&pk!=""){
				//						PortletContext.Pk = pk;
				//						DataLoaderUtils.getDataLoader(model,this,getXml_resultHandler).loadXML(PortletContext.Pk);
				//					}
				//				}
			}
			protected function httpErrorHandler(event:ErrorEvent):void
			{
				Alert.show("服务请求失败");
			}
			
			private function getInitXml():XML{
				return iniXml;
			}
			private function ioErrorHandler(e:IOErrorEvent): void {
				Alert.show(e.toString());
			}
			//启动计时器
			private function startTimmer():void{
				var myTimer:Timer = new Timer(20, 1000);
				myTimer.addEventListener("timer", timerHandler);
				myTimer.start();
			}
			//计时触发器
			private function timerHandler(event:TimerEvent):void{
				if(myDrawBoardIsComplete==true&&xmlIsReceived==true){
					startParseXml();
					(event.currentTarget as Timer).stop();
				}
			}
			//开始解析xml
			private function startParseXml():void{
				if(iniXml!=null&&iniXml!="")
					myDrawBoard.ParseFromXml(iniXml);
			}
			private function initData():void{
				addLayout();
				
				//				portletCatesServlet.url = ServletConst.PORTLETCATES_SERVLET_URL;
				//				portletCatesServlet.send();
				//								
				//				pageskinServlet.url = ServletConst.SKIN_SERVLET_URL+"?type=page";
				//				pageskinServlet.send();
				//				layoutskinServlet.url = ServletConst.SKIN_SERVLET_URL+"?type=layout";
				//				layoutskinServlet.send();
				//				portletskinServlet.url = ServletConst.SKIN_SERVLET_URL+"?type=portlet";
				//				portletskinServlet.send();
				//				
				//				theamServlet.url = ServletConst.THEAM_SERVLET_URL+"?groupid="+PortletContext.Pk_group;	
				//				theamServlet.send();
				
				DataLoaderUtils.getDataLoader(model,this,portletCates_resultHandler).loadPortletCates();
				DataLoaderUtils.getDataLoader(model,this,skin_resultHandler).loadSkin("page");
				DataLoaderUtils.getDataLoader(model,this,skin_resultHandler).loadSkin("layout");
				DataLoaderUtils.getDataLoader(model,this,skin_resultHandler).loadSkin("portlet");
				DataLoaderUtils.getDataLoader(model,this,theam_resultHandler).loadTheam(PortletContext.Pk_group);
				DataLoaderUtils.getDataLoader(model,this,getPagenames_resultHandler).getPagenames(PortletContext.Pk_group);
				DataLoaderUtils.getDataLoader(model,this,getDevices_resultHandler).getAllDevices();
			}
			private function getDevices_resultHandler(devices:XML):void{
				var deviceList:XMLList = devices.Device;
				var deviceProvider:Array = new Array();
				for each (var device:XML in deviceList) {
					var obj:Object = new Object();
					obj.label =  device.@name;
					obj.data = device.@code;
					deviceProvider.push(obj);
				}
				
				device_comb.dataProvider = deviceProvider;
				device_comb.dropdown.dataProvider = deviceProvider;
				device_comb.selectedIndex = -1;
			}
			private function getPagenames_resultHandler(pages:XML):void{
				var elements:XMLList = pages.Page;
				for each (var ele:XML in elements) {
					var obj:Object = {name:null,pk_page:null};
					obj.name = ele.@name;
					obj.pk_page = ele.@pk_page;
					existPagenames.push(obj);
				}
			}
			//获取到xml串后调用
			private function getXml_resultHandler(xml:XML):void{
				this.iniXml = xml;
				xmlIsReceived = true;
				//CreateContainer();
				//myDrawBoard.ParseFromXml(iniXml);
			}
			//portlet分类
			public function portletCates_resultHandler(cates:XML):void{
				//var cates:XML  = new XML(event.result.toString());
				portletcates_comb.dataProvider = cates.Cate;
				//加载默认值
				loadPortlet();
			}
			//加入portlet
			public function addLayout():void{				
				var layout:LayoutElement = new LayoutElement();
				layout.Draw();
				layout_box.addChild(layout);			
			}
			//skin
			public function skin_resultHandler(skins:XML):void{
				//var skins:XML  = new XML(event.result.toString());
				var type:String = skins.@type;
				if(type=="page"){
					page_skin_comb.dataProvider = skins.Skin;
					//page_skin_comb.dropdown.dataProvider = skins.Skin;
					page_skin_comb.selectedIndex = -1;
				}
				else if(type=="layout"){					
					layout_skin_comb.dataProvider = skins.Skin;
					//layout_skin_comb.dropdown.dataProvider = skins.Skin;
					layout_skin_comb.selectedIndex = -1;
				}
				else if(type=="portlet"){					
					portlet_skin_comb.dataProvider = skins.Skin;
					//portlet_skin_comb.dropdown.dataProvider = skins.Skin;
					portlet_skin_comb.selectedIndex = -1;
				}
			}
			//template
			public function theam_resultHandler(theams:XML):void{
				//var theams:XML  = new XML(event.result.toString());
				template_comb.dataProvider = theams.Theam;				
				template_comb.selectedIndex = -1;
				
				//theam_comb.dataProvider = theams.Theam;
				//theam_comb.selectedIndex = -1;
			}
			
			//加入portlet
			public function portlet_resultHandler(portlets:XML):void{
				//var portlets:XML  = new XML(event.result.toString());
				//				portlets = new XML(<Portlets>
				//					<Portlet id="test1" title="test1"/>
				//					<Portlet id="test2" title="test2"/>
				//					</Portlets>);					
				portlet_tile.removeAllChildren();
				var elements:XMLList = portlets.Portlet;
				for each (var ele:XML in elements) {
					var pt:PortletElement = new PortletElement();
					pt.Name = ele.@id;
					pt.Title = ele.@title;
					pt.Draw();
					portlet_tile.addChild(pt);
					
				}
				//portlet_list.dataProvider = portlets.Portlet;
			}
			//加载portlet
			public function loadPortlet():void{
				var value:Object = portletcates_comb.selectedItem;
				if(value==null)return;
				var id:String = value.@id;
				//				portletServlet.url = ServletConst.PORTLET_SERVLET_URL;
				//				portletServlet.url+="?id="+id;
				//				portletServlet.send();
				//				
				DataLoaderUtils.getDataLoader(model,this,portlet_resultHandler).loadPortlet(id);
				
			}
			//把xml文件保存到后台,如果是保存到数据库就执行脚本，如果保存到文件里就调用servlet，根据使用场景改注释代码
			private function SaveFile():void {	
				var errorStr:String = validate();
				if(errorStr!=null&&errorStr!=""){
					errorStr+="\n请重新输入"; 
					Alert.show(errorStr,"发生错误");
					return;
				}
				//更新版本
				myDrawBoard.getTopLayout().page.updateVersion();
				
				var xmlString:String = myDrawBoard.getTopLayout().BuildXml().toString();
				var xml:XML=new XML(xmlString);
				//通过js调用调用保存到数据库			  
				//ExternalInterface.call("saveXml",xmlString);	
				//				if(newpage==true)
				//					saveXmlServlet.url = ServletConst.SAVE_NEW_XML_SERVLET_URL;
				//				else if(newpage==false)
				//					saveXmlServlet.url = ServletConst.SAVE_EDIT_XML_SERVLET_URL+"?pk="+PortletContext.Pk;				
				//				var params:URLVariables = new URLVariables();
				//				params.groupid = PortletContext.Pk_group;
				//				params.pml = encodeURIComponent(xml);
				//				saveXmlServlet.send(params);
				
				DataLoaderUtils.getDataLoader(model,this,saveXml_resultHandler).saveXml(newpage,xml);
			}
			private function validate():String{
				var page:Page = myDrawBoard.getTopLayout().page;
				var errorStr:String = "";
				errorStr = validateName(myDrawBoard.getTopLayout());
				errorStr += page.validate();
				var sizesError:String = "";
				sizesError = myDrawBoard.getTopLayout().validateSizes(myDrawBoard.getTopLayout());
				return errorStr+sizesError;
			}
			//检查名称是否与服务器上有重复
			public function validateName(layout:Layout):String{
				var errorStr:String = ""; 
				for(var i:int=0;i<existPagenames.length;i++){
					var obj:Object = existPagenames[i];
					if(layout.page.pagename==obj.name){
						//名称相同并且不是当前修改的页面
						if(PortletContext.Pk!=obj.pk_page){
						 errorStr = "pagename 名称已经存在!\n";
						 break;
						}
					}
				}
				return errorStr;
			}
			private function saveXml_resultHandler(xml:XML):void{
				Alert.show("保存成功");
			}
			//导出xml
			private function OutputFile():void{
				var xmlString:String = myDrawBoard.getTopLayout().BuildXml().toString();
				var xml:XML=new XML(xmlString);
				
				var filename:String;  
				var date:Date = new Date();
				var dateFormatter:DateFormatter=new DateFormatter();
				dateFormatter.formatString="YYYY-MM-DD--JJ-NN-SS";//2010-11-21--12-01-04
				filename="process_"+dateFormatter.format(date);
				
				var request:URLRequest = new URLRequest(ServletConst.OUTPUTXML_SERVLET_URL+"?filename="+filename);
				request.method=URLRequestMethod.POST;
				request.contentType = "application/octet-stream";
				request.data = encodeURIComponent(xml);
				navigateToURL(request);
			}
			
			//导出图片到本地
			private function outputImage():void{
				while(myDrawBoard.parent is Layout){
					myDrawBoard = myDrawBoard.parent as Layout;
				}
				var bitmapData:BitmapData=new BitmapData(myDrawBoard.width,myDrawBoard.height);
				bitmapData.draw(myDrawBoard);
				
				var filename:String;  
				var date:Date = new Date();
				var dateFormatter:DateFormatter=new DateFormatter();
				dateFormatter.formatString="YYYY-MM-DD--JJ-NN-SS";//2010-11-21--12-01-04
				filename="image_"+dateFormatter.format(date);
				
				var request:URLRequest = new URLRequest(ServletConst.OUTPUTIMAGE_SERVLET_URL+"?filename="+filename);
				request.method=URLRequestMethod.POST;
				request.contentType = "application/octet-stream";
				request.data = new PNGEncoder().encode(bitmapData);
				navigateToURL(request);
			}
			//保存整个界面为图片
			private function saveAllAsImage():void{
				var bitmapData:BitmapData=new BitmapData(this.width,this.height);
				bitmapData.draw(this);
				//var bitmap:Bitmap = new Bitmap(bitmapData);
				
				var request:URLRequest = new URLRequest(ServletConst.SAVEIMAGE_SERVLET_URL);
				request.method=URLRequestMethod.POST;
				request.contentType = "application/octet-stream";
				request.data = new JPEGEncoder(80).encode(bitmapData);
				var loader:URLLoader = new URLLoader();
				loader.load(request);
			}
			//查看xml文件
			private function showXml():void{
				var xml:String = myDrawBoard.getTopLayout().BuildXml().toString();
				
				var xmlwin:TitleWindow = TitleWindow(PopUpManager.createPopUp(this,TitleWindow,true)); 
				xmlwin.title = "xml文件";
				xmlwin.width = 800;
				xmlwin.height = 600;
				xmlwin.x = Math.ceil((screen.width-xmlwin.width)/2); 
				xmlwin.y = Math.ceil((screen.height-xmlwin.height)/2); 
				xmlwin.showCloseButton = true;
				xmlwin.setStyle("borderColor","#FFFFFF");
				xmlwin.addEventListener(CloseEvent.CLOSE,xmlwinCloseHandler);
				
				var area:TextArea = new TextArea();
				area.percentWidth = 100;
				area.percentHeight = 100;
				area.text = xml;
				xmlwin.addChild(area);
				
				PopUpManager.centerPopUp(xmlwin);			 
			}
			
			//关闭弹出的xml文件查看框
			private function xmlwinCloseHandler(event:CloseEvent):void{
				PopUpManager.removePopUp(event.currentTarget as TitleWindow);
			}
			
			//初始化设计界面
			private function CreateContainer():void {								
				myDrawBoard.x=0;
				myDrawBoard.y=0;
				myDrawBoard.percentWidth=100;
				myDrawBoard.percentHeight=100;
				myCanvas.addChild(myDrawBoard);
				myDrawBoard.addEventListener(ElementEvent.ELEMENT_SELECT_CHANGED,onelementselectchanged);				
				iniXml =getInitXml();
				
				myDrawBoard.addEventListener(FlexEvent.CREATION_COMPLETE,onDrawBoardComplete);
				//myDrawBoard.ParseFromXml(iniXml);				
				myDrawBoard.AddUndo();
				
			}	  
			//主面板创建完毕调用
			private function onDrawBoardComplete(event:FlexEvent):void{			     
				myDrawBoardIsComplete = true;
			}
			
			//根据选择的不同节点，显示相应的属性
			private function onelementselectchanged(event:ElementEvent):void {
				//Alert.show("show property");
				if (event.srcElement is Element) {
					if(event.srcElement is Element){
						var selectElement:Element = event.srcElement as Element;
						currentElement = selectElement;
						if(selectElement.TruePanel is Layout)
							myDrawBoard = selectElement.TruePanel as Layout;
					}
					if (event.srcElement.Selected==true) {
						//tn_prop.removeAllChildren();
						if (event.srcElement is Portlet) {
							tn_prop.selectedChild = tab_portlet_prop;
							showPortletProperty(event.srcElement as Portlet);
						}
						else if(event.srcElement is Layout){
							tn_prop.selectedChild = tab_layout_prop;
							showLayoutProperty(event.srcElement as Layout);
						}
					}
				}
			}
			protected function tn_prop_changeHandler(event:IndexChangedEvent):void
			{
				var index:int = event.newIndex;
				if(index == 0)showPageProperty();
			}
			private function showPageProperty():void{
				var page:Page = myDrawBoard.getTopLayout().page;
				tx_page_Pagename.text = page.pagename;
				tx_page_Title.text = page.title;
				tx_page_Label.text = page.lable;
				tx_page_Ordernum.value = page.ordernum;
				
				if(page.level==null||page.level=="")tx_page_Level.selectedIndex = -1;
				else {
					if(page.level=="0")tx_page_Level.selectedIndex = 0;
					else if(page.level=="1")tx_page_Level.selectedIndex = 1;
					//else if(page.level=="3")tx_page_Level.selectedIndex	= 2;	
					//					var item:Object = tx_page_Level.itemToLabel(page.level);
					//					var datas:Array = tx_page_Level.dataProvider as Array;
					//					tx_page_Level.selectedItem = item;					
				}
				
				var size:int = 0;				
				var tempds:XMLListCollection = template_comb.dataProvider as XMLListCollection;
				if(tempds!=null)size = tempds.length;
				for(var i:int=0;i<size;i++){
					var tempxml:XML = tempds[i];
					if(tempxml.@id==page.skin){
						template_comb.selectedIndex = i;
						break;
					}
				}
				var skinds:XMLListCollection = page_skin_comb.dataProvider as XMLListCollection;
				size = 0;
				if(skinds!=null)size = skinds.length;
				for(var j:int=0;j<size;j++){
					var skinxml:XML = skinds[j];
					if(skinxml.@id==page.template){
						page_skin_comb.selectedIndex = j;
						break;
					}
				}
				
				setDeviceProperty(page);				
				isdefault_comb.selectedIndex = page.isdefault==false?0:1;
				readonly_comb.selectedIndex = page.readonly==false?0:1;	
				keepstate_comb.selectedIndex = page.keepstate==false?0:1;
			}
			//设置设备属性
			private function setDeviceProperty(page:Page):void{
				var devices:Array = page.devices;
				var deviceProvider:Object = device_comb.dataProvider;
				var selectItems:Array = new Array();
				for(var i:int=0;i<deviceProvider.length;i++){
					var temp:Object = deviceProvider[i];
					temp.selected = false;
					temp.checked = false;
					for(var j:int=0;j<devices.length;j++){
						if(devices[j]==temp.data){
							temp.selected = true;
							temp.checked = true;
							selectItems.push(temp);
							break;
						}
					}
				}
				device_comb.selectedItems = selectItems;
			}
			private function showLayoutProperty(iElement:Layout):void{
				tx_layout_ID.text =iElement.ID.toString();
				tx_layout_Name.text = iElement.Name;
				tx_layout_sizes.text = iElement.Sizes;	
				
				layout_skin_comb.selectedIndex = -1;
				var size:int = 0;				
				var skinds:XMLListCollection = layout_skin_comb.dataProvider as XMLListCollection;
				if(skinds!=null)size = skinds.length;
				for(var j:int=0;j<size;j++){
					var skinxml:XML = skinds[j];
					if(skinxml.@id==iElement.skin){
						layout_skin_comb.selectedIndex = j;
						break;
					}
				}		
			}
			private function showPortletProperty(iElement:Portlet):void{
				tx_portlet_ID.text =iElement.ID.toString();
				tx_portlet_Name.text = iElement.Name;
				tx_portlet_title.text = iElement.Title;
				
				portlet_skin_comb.selectedIndex = -1;
				var size:int = 0;				
				var skinds:XMLListCollection = portlet_skin_comb.dataProvider as XMLListCollection;
				if(skinds!=null)size = skinds.length;
				for(var j:int=0;j<size;j++){
					var skinxml:XML = skinds[j];
					if(skinxml.@id==iElement.theam){
						portlet_skin_comb.selectedIndex = j;
						break;
					}
				}		
			}
			private function onIDChange(event: flash.events.Event):void {
				myDrawBoard.selectedElement.ID=(event.currentTarget as TextInput).text;
			}	
			private function onNameChange(event: flash.events.Event):void {
				myDrawBoard.selectedElement.Name=(event.currentTarget as TextInput).text;				
			}	
			//layout
			private function onSizesChange(event: flash.events.Event):void {
				var layout:Layout = myDrawBoard.selectedElement as Layout;
				layout.Sizes = tx_layout_sizes.text;				
			}	
			private function onLayoutSkinChange(event: flash.events.Event):void {
				var layout:Layout = myDrawBoard.selectedElement as Layout;
				var value:Object = layout_skin_comb.selectedItem;
				layout.skin = value.@id;				
			}
			//layout
			
			//portlet
			protected function portletcates_comb_changeHandler(event:ListEvent):void
			{
				loadPortlet();
			}	
			private function onTitleChange(event: flash.events.Event):void {
				var pt:Portlet = myDrawBoard.selectedElement as Portlet;
				pt.Title = (event.currentTarget as TextInput).text;
			}
			private function onPortletSkinChange(event: flash.events.Event):void {
				var pt:Portlet = myDrawBoard.selectedElement as Portlet;
				var value:Object = portlet_skin_comb.selectedItem;
				pt.theam = value.@id;	
				//pt.setStyle("backgroundColor","0x0000ff");				
				//pt.setStyle("backgroundImage","images/map.jpg");
			}
			//portlet
			
			//page		
			private function onPagePagenameChange(event: flash.events.Event):void {
				var layout:Layout = myDrawBoard.getTopLayout() as Layout;
				var page:Page = layout.page;
				page.pagename=(event.currentTarget as TextInput).text;				
			}
			private function onPageTitleChange(event: flash.events.Event):void {
				var layout:Layout = myDrawBoard.getTopLayout() as Layout;
				var page:Page = layout.page;
				page.title=(event.currentTarget as TextInput).text;				
			}
			private function onPageSkinChange(event: flash.events.Event):void {
				var layout:Layout = myDrawBoard.getTopLayout() as Layout;
				var page:Page = layout.page;
				var value:Object = page_skin_comb.selectedItem;
				page.template = value.@id;			
			}
			private function onTemplateChange(event: flash.events.Event):void {
				var layout:Layout = myDrawBoard.getTopLayout() as Layout;
				var page:Page = layout.page;
				var value:Object = template_comb.selectedItem;
				page.skin=value.@id;				
			}
			private function onLevelChange(event: flash.events.Event):void {
				var layout:Layout = myDrawBoard.getTopLayout() as Layout;
				var page:Page = layout.page;
				page.level=String(tx_page_Level.selectedItem.label);				
			}
			private function onDeviceChange(event: flash.events.Event):void {
				var layout:Layout = myDrawBoard.getTopLayout() as Layout;
				var page:Page = layout.page;
				page.devices.splice(0,page.devices.length);
				var items:Array = device_comb.selectedItems;	
				if(items==null)return;
				var objdatas:Array = new Array();
				for(var i:int=0;i<items.length;i++){
					var obj:Object = items[i];
					objdatas.push(obj.data);					
				}
				page.devices=objdatas;				
			}
			private function onLabelChange(event: flash.events.Event):void {
				var layout:Layout = myDrawBoard.getTopLayout() as Layout;
				var page:Page = layout.page;
				page.lable=(event.currentTarget as TextInput).text;
				
			}
			private function onIsDefaultChange(event: flash.events.Event):void {
				var layout:Layout = myDrawBoard.getTopLayout() as Layout;
				var page:Page = layout.page;
				var value:String = String(isdefault_comb.selectedItem.label);
				page.isdefault=(value=="true"?true:false);				
			}
			private function onReadonlyChange(event: flash.events.Event):void {
				var layout:Layout = myDrawBoard.getTopLayout() as Layout;
				var page:Page = layout.page;
				var value:String = String(readonly_comb.selectedItem.label);
				page.readonly = (value=="true"?true:false);				
			}
			private function onKeepStateChange(event: flash.events.Event):void {
				var layout:Layout = myDrawBoard.getTopLayout() as Layout;
				var page:Page = layout.page;
				var value:String = String(keepstate_comb.selectedItem.label);
				page.keepstate = (value=="true"?true:false);				
			}
			private function onOrdernumChange(event: flash.events.Event):void {
				var layout:Layout = myDrawBoard.getTopLayout() as Layout;
				var page:Page = layout.page;
				page.ordernum = int((event.currentTarget as HSlider).value);
			}			
			//page			
			//删除节点
			private function DeleteElement():void {				
				var children:Array = myDrawBoard.getChildren();					
				for (var i:int=0;i<children.length;i++) {
					if (!(children[i] is Element)&&!(children[i] is LayoutPanel))continue;
					var ele:Element;
					if(children[i] is Element){
						ele = children[i] as Element;
						if(ele.Selected==true){
							myDrawBoard.DeleteElement(ele);
						}
					}
					else if(children[i] is LayoutPanel){
						var layoutpanel:LayoutPanel = (children[i] as LayoutPanel);
						layoutpanel.deleteSelectedElement();
					}
				}
				myDrawBoard.Status;
				myDrawBoard.AddUndo();	
			}
			
			public function ontoolbarclick(event:ItemClickEvent) : void {
				switch(event.item.cmd) {					
					case "savefile":
					{
						SaveFile();
						break;
					}
					case "delete":
					{
						DeleteElement();
						break;
					}
					case "select":
					{
						myDrawBoard.Status="";
						break;
					}
					case "beginnode":
					{
						myDrawBoard.Status="beginnode";
						break;
					}
					case "endnode":
					{
						myDrawBoard.Status="endnode";
						break;
					}
					case "worknode":
					{
						myDrawBoard.Status="worknode";
						break;
					}
					case "route":
					{
						myDrawBoard.Status="routebegin";
						break;
					}
					case "undo":
					{
						myDrawBoard.Undo();
						break;
					}
					case "redo":
					{
						myDrawBoard.Redo();
						break;
					}
					case "clear":
					{
						Alert.show("您确认要清空图形吗？","提示",Alert.YES | Alert.NO,null,onClearCloseHandler);
						break;
					}
					case "saveImage":{  //调用顶级容器的保存图像方法		
						outputImage();
						break;
						//saveAsImage();
						//saveAllAsImage();
					}
					case "showXml":{
						showXml();
						break;
					}					
				}
			}
			//清空当前界面元素
			private function onClearCloseHandler(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					var toplayout:Layout = myDrawBoard.getTopLayout();
					toplayout.Clear();
					toplayout.AddUndo();
				}
			}
			
			
		]]>
	</mx:Script>
	
	<mx:Array id="ToolButton"> 
		<!--
		<mx:Object  icon="@Embed('images/menu/open.gif')" cmd="inputfile" toolTip="导入"/> 
		<mx:Object  icon="@Embed('images/menu/output.png')" cmd="outputfile" toolTip="导出"/> 
		<mx:Object  icon="@Embed('images/menu/undo.png')" cmd="undo" toolTip="撤销"/>
		<mx:Object  icon="@Embed('images/menu/redo.png')" cmd="redo" toolTip="重做"/>
		<mx:Object  icon="@Embed('images/menu/saveImage.png')" cmd="saveImage" toolTip="导出图片"/>
		-->
		<mx:Object  icon="@Embed('images/menu/save.png')" cmd="savefile" toolTip="保存"/> 
		<mx:Object  icon="@Embed('images/menu/clear.gif')" cmd="clear" toolTip="清空"/> 
		<mx:Object  icon="@Embed('images/menu/delete.png')" cmd="delete" toolTip="删除"/>
		<mx:Object  icon="@Embed('images/menu/showxml2.png')" cmd="showXml" toolTip="查看xml文件">		
		</mx:Object>		
		
	</mx:Array> 
	
	<mx:Array id="isdefault_dataprovider">
		<mx:Object label="false" zh_label="否"/>
		<mx:Object label="true" zh_label="是"/>  
	</mx:Array>
	<mx:Array id="readonly_dataprovider">
		<mx:Object label="false" zh_label="否"/>
		<mx:Object label="true" zh_label="是"/>  
	</mx:Array>
	<mx:Array id="keepstate_dataprovider">
		<mx:Object label="false" zh_label="否"/>
		<mx:Object label="true" zh_label="是"/>  
	</mx:Array>
	<mx:Array id="user_level_dataprovider">
		<mx:Object label="0" zh_label="集团管理员"/> 
		<mx:Object label="1" zh_label="集团用户"/>  
		<mx:Object label="2" zh_label="业务管理员"/>  
		<mx:Object label="3" zh_label="超级管理员"/>  
	</mx:Array>
	
	<mx:Canvas x="0" y="0" width="100%" height="30">
		<mx:ButtonBar x="0" y="0" id="tb_Main" height="100%"  dataProvider="{ToolButton}" itemClick="ontoolbarclick(event)">
		</mx:ButtonBar>
	</mx:Canvas>
	
	<mx:StringValidator id="pagename_validator" source="{tx_page_Pagename}" property="text" required="true">		
	</mx:StringValidator>
	<mx:StringValidator id="title_validator" source="{tx_page_Title}" property="text" required="true">		
	</mx:StringValidator>
	
	<mx:HDividedBox id="main" left="0" top="30" bottom="0" right="0"  backgroundColor="#FFFFFF" backgroundAlpha="0.6" borderStyle="outset" borderColor="#0495FB">
		<mx:Canvas label="设计器" width="70%" height="100%" id="myCanvas" themeColor="#FFFFFF" backgroundColor="#FFFFFF">
		</mx:Canvas>
		<mx:Canvas id="right_canvas" width="30%" height="100%" creationPolicy="all" backgroundColor="#FFFFFF">
			<mx:Canvas x="0" y="0" width="100%" height="36%" id="topCanvas" backgroundColor="#FFFFFF" borderStyle="solid">
				<mx:VBox id="layout_box"  x="0"  y="0" width="100%" height="65" horizontalAlign="center" verticalAlign="middle" verticalGap="4" borderStyle="solid"/>
				<mx:Canvas id="portlet_canvas" x="0" y="65" height="{topCanvas.height-layout_box.height-5}" width="100%" borderStyle="solid" borderColor="#ABCDCD">
					<mx:ComboBox id="portletcates_comb"  x="0" y="0" height="30" left="0" right="0" cornerRadius="0" labelField="@text"  change="portletcates_comb_changeHandler(event)"></mx:ComboBox>
					<mx:Canvas id="outside_canvas" x="0" y="0" bottom="0" height="{portlet_canvas.height-portletcates_comb.height}" width="100%" borderStyle="solid">
						<mx:Canvas x="10" y="10" bottom="0" height="{outside_canvas.height-10}" width="100%"  borderStyle="none">
							<mx:Tile id="portlet_tile" x="0" bottom="0" height="100%" width="100%"  borderStyle="solid"  direction="horizontal" themeColor="#C90808" borderColor="#FFFFFF">							
							</mx:Tile>
						</mx:Canvas>
					</mx:Canvas>
				</mx:Canvas>
			</mx:Canvas>
			<mx:TabNavigator id="tn_prop" x="0" width="100%" height="64%" bottom="0" borderStyle="solid" selectedIndex="2" change="tn_prop_changeHandler(event)">
				<mx:Canvas id="tab_page_prop" label="页面设置" width="100%" height="100%" borderStyle="solid" x="0" y="0">
					<mx:Label x="10" y="8" text="页面名称:"/>
					<mx:TextInput y="6" right="10" left="80" id="tx_page_Pagename" change="onPagePagenameChange(event)" enabled="{newpage==true}" restrict="a-zA-Z0-9"/>
					<mx:Label x="10" y="38" text="标题："/>
					<mx:TextInput y="36" right="10" left="80" id="tx_page_Title" change="onPageTitleChange(event)" enabled="true"/>
					<mx:Label x="10" y="68" text="用户类型："/>
					<mx:ComboBox y="66" right="10" left="80" id="tx_page_Level" cornerRadius="0"  change="onLevelChange(event)" dataProvider="{user_level_dataprovider}" labelField="zh_label"  enabled="true"/>
					<mx:Label x="10" y="98" text="页签："/>
					<mx:TextInput y="96" right="10" left="80" id="tx_page_Label" change="onLabelChange(event)" enabled="true"/>		
					<mx:Label x="10" y="128" text="优先级："/>
					<mx:HSlider y="130" right="10" left="80" id="tx_page_Ordernum" maximum="100" change="onOrdernumChange(event)" enabled="true" allowTrackClick="true" minimum="0"
								snapInterval="1" liveDragging="true" showDataTip="true" height="20"/>
					<mx:Label x="10" y="159" text="设备："/>
					<comp:MultiComboBox id="device_comb" right="10" left="80" y="156" cornerRadius="0" change="onDeviceChange(event)"/>
					<!--
					<mx:ComboBox id="device_comb" y="156" right="10" left="80" change="onDeviceChange(event)" labelField="@name" enabled="true"/>
					-->
					
					<!--
					<mx:TextInput y="126" right="10" left="80" id="tx_page_Ordernum" change="onOrdernumChange(event)" enabled="true" restrict="0-9"/>
					-->
					<mx:Label x="10" y="188" text="主题："/>
					<mx:ComboBox id="template_comb" y="186"  cornerRadius="0" right="10" left="80" change="onTemplateChange(event)" labelField="@title" enabled="true"/>				
					<mx:Label x="10" y="218" text="样式："/>
					<mx:ComboBox id="page_skin_comb" y="216" cornerRadius="0"  right="10" left="80" change="onPageSkinChange(event)" labelField="@name" enabled="true"/>			
					<mx:Label x="10" y="248" text="是否默认："/>
					<mx:ComboBox y="246" right="10" left="80" cornerRadius="0"  id="isdefault_comb" change="onIsDefaultChange(event)" dataProvider="{isdefault_dataprovider}" labelField="zh_label" enabled="true"/>
					<mx:Label x="10" y="278" text="是否只读："/>
					<mx:ComboBox y="276" right="10" left="80"  cornerRadius="0" id="readonly_comb" change="onReadonlyChange(event)" dataProvider="{readonly_dataprovider}" labelField="zh_label" enabled="true"/>					
					<mx:Label x="10" y="278" text="版本：" visible="false"/>	
					<mx:TextInput y="276" right="10" left="80" id="version"  enabled="false" visible="false"/>									
					<mx:Label x="10" y="308" text="保持页面状态："/>
					<mx:ComboBox y="306" right="10" left="95" cornerRadius="0"  id="keepstate_comb" change="onKeepStateChange(event)" dataProvider="{keepstate_dataprovider}" labelField="zh_label" enabled="true"/>
					
										
				</mx:Canvas>
				<mx:Canvas id="tab_layout_prop" label="布局设置" width="100%" height="100%" borderStyle="solid" x="0" y="0">
					<mx:Label x="10" y="10" text="编号："/>
					<mx:TextInput y="8" right="10" left="71" id="tx_layout_ID" change="onIDChange(event)" enabled="false"/>
					<mx:Label x="10" y="43" text="宽度比例："/>
					<mx:TextInput y="41" right="10" left="71" id="tx_layout_sizes" change="onSizesChange(event)" enabled="{currentElement is Layout}" restrict="0-9,%" toolTip="输入格式:如50,50或50,50%或100,50%,50%;整数-像素宽度，百分数-比例宽度;例如50,50%：第一列占50像素宽度，第二列占剩下宽度的50%"/>
					<mx:Label x="10" y="76" text="样式："/>
					<mx:ComboBox y="74" right="10" left="71" cornerRadius="0"  id="layout_skin_comb" labelField="@name" change="onLayoutSkinChange(event)" enabled="{currentElement is Layout}"/>
					<mx:Label x="10" y="109" text="名称：" visible="false"/>
					<mx:TextInput y="107" right="10" left="71" id="tx_layout_Name" change="onNameChange(event)" enabled="{currentElement is Layout}" visible="false"/>					
				</mx:Canvas>
				<mx:Canvas id="tab_portlet_prop" label="Portlet设置" width="100%" height="100%" borderStyle="solid" x="0" y="0">
					<mx:Label x="10" y="10" text="编号："/>
					<mx:TextInput y="8" right="10" left="71" id="tx_portlet_ID" change="onIDChange(event)" enabled="false"/>
					<mx:Label x="10" y="40" text="名称："/>
					<mx:TextInput y="38" right="10" left="71" id="tx_portlet_Name" change="onNameChange(event)" enabled="false"/>
					<mx:Label x="10" y="72" text="标题："/>
					<mx:TextInput y="70" right="10" left="71" id="tx_portlet_title" change="onTitleChange(event)" enabled="{currentElement is Portlet}"/>
					<mx:Label x="10" y="104" text="样式："/>
					<mx:ComboBox y="102" right="10" left="71" cornerRadius="0"  id="portlet_skin_comb" labelField="@name" change="onPortletSkinChange(event)" enabled="{currentElement is Portlet}"/>
				</mx:Canvas>				
			</mx:TabNavigator>			
		</mx:Canvas>
	</mx:HDividedBox>
	
	<mx:Style>
		mx|ToolTip {  
			fontSize: 12;  
			color: #000000;
			backgroundColor:#abcdef;
		}
	</mx:Style>
</mx:Application>

